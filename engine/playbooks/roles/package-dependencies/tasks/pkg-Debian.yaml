---
# ============LICENSE_START=======================================================
#  Copyright (C) 2019 The Nordix Foundation. All rights reserved.
# ================================================================================
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# SPDX-License-Identifier: Apache-2.0
# ============LICENSE_END=========================================================

- name: Create directory to store apt packages
  file:
    path: "{{ pkg_folder }}/amd64"
    state: "{{ item }}"
  with_items:
    - absent
    - directory

- name: Add docker apt key
  apt_key:
    url: https://download.docker.com/linux/ubuntu/gpg
    state: present
  become: true

# NOTE(fdegir): ansible apt_repository gives segmentation fault so failling back to command
- name: Add docker apt repository
  command: |-
    add-apt-repository \
    "deb [arch=amd64] https://download.docker.com/linux/ubuntu {{ ansible_distribution_release }} stable"
  changed_when: false
  become: true

- name: Run apt update
  apt:
    update_cache: true
  become: true

- name: Copy ubuntu.list file
  copy:
    src: ubuntu.list
    dest: /tmp/ubuntu.list
    force: true

- name: Download apt packages using ubuntu.list file
  shell: |
    set -o pipefail
    apt download $(grep -vE "^\s*#" /tmp/ubuntu.list | tr "\n" " ")
  changed_when: false
  args:
    executable: /bin/bash
    chdir: "{{ pkg_folder }}/amd64"

# TODO (fdegir): we probably need to pin docker version to ensure whatever
# we download works for the scenarios - especially for ONAP
- name: Download docker packages
  command: "apt download {{ item }}"
  loop: "{{ docker_packages }}"
  changed_when: false
  args:
    chdir: "{{ pkg_folder }}/amd64"

- name: Install dpkg-dev
  apt:
    name: dpkg-dev
    state: present
  become: true

- name: Generate Packages.gz file for apt packages
  shell: |
    set -o pipefail
    dpkg-scanpackages amd64 | gzip -9c > amd64/Packages.gz
  args:
    executable: /bin/bash
    creates: "{{ pkg_folder }}/amd64/Packages.gz"
    chdir: "{{ pkg_folder }}"

# vim: set ts=2 sw=2 expandtab:
