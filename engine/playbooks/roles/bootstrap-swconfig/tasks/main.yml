---
# ============LICENSE_START=======================================================
#  Copyright (C) 2019 The Nordix Foundation. All rights reserved.
# ================================================================================
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# SPDX-License-Identifier: Apache-2.0
# ============LICENSE_END=========================================================

# NOTE: config_path is used by all the components so we prepare it here
- name: Ensure config path exists and empty
  file:
    path: "{{ config_path }}"
    state: "{{ item }}"
  with_items:
    - absent
    - directory

# NOTE: this task is still needed even with group_vars as it is possible for users to
# provide their own sdf.yaml files. In this case, we copy it as engine/inventory/groups_vars/all/sdf.yaml
# If it is not provided, the default sdf.yaml file will still be in use.
- name: Get SDF file
  get_url:
    url: "{{ item.src }}"
    dest: "{{ item.dest }}"
    mode: 0644
    force: true
  with_items:
    - {src: "{{ lookup('env', 'SDF') }}", dest: "{{ sdf_file }}"}

# NOTE: This task is still needed even with groups_vars as we need the SDF information
# from the user provided sdf.yaml file in this playbook. Although we have replaced the
# SDF in group_vars/all directory, this playbook is run with whatever information was
# read from the default SDF when the playbook was invoked.
- name: Get scenario metadata
  include_vars:
    file: "{{ sdf_file }}"

- name: Get curated apps for '{{ deploy_scenario }}'
  set_fact:
    curated_apps: "{{ scenario[deploy_scenario].installers[installer_type].curated_apps | default ([], true) }}"

- name: Fail if the scenario '{{ deploy_scenario }}' is not supported by the installer '{{ installer_type }}'
  fail:
    msg: "'{{ deploy_scenario }}' is not supported by the installer '{{ installer_type }}'"
  when: installer_type not in scenario[deploy_scenario].installers

- name: Fail if the distro '{{ distro }}' is not supported by the installer '{{ installer_type }}'
  fail:
    msg: "'{{ distro }}' is not supported by the installer '{{ installer_type }}'"
  when: distro not in scenario[deploy_scenario].installers[installer_type].distros

- name: Fail if the requested apps is not supported by the installer '{{ installer_type }}'
  fail:
    msg: "'{{ app }}' is not supported by the installer '{{ installer_type }}'"
  when: installer_type not in apps[app].installers
  loop: "{{ curated_apps }}"
  loop_control:
    loop_var: app

- name: Remove existing clone of the scenario repository
  file:
    path: "{{ engine_cache }}/repos/swconfig"
    state: absent
  when: execution_mode == 'online-deployment'

- name: Fail if the scenario '{{ deploy_scenario }}' is not supported by the provisioner '{{ provisioner_type }}'
  fail:
    msg: "'{{ deploy_scenario }}' is not supported by the provisioner '{{ provisioner_type }}'"
  when: provisioner_type not in scenario[deploy_scenario].provisioners

- name: Clone the scenario repository and checkout version '{{ scenario[deploy_scenario].version }}'
  git:
    repo: "{{ scenario[deploy_scenario].src }}"
    dest: "{{ engine_cache }}/repos/swconfig"
    version: "{{ scenario[deploy_scenario].version }}"
    refspec: "{{ scenario[deploy_scenario].refspec | default(omit) }}"
    force: true
  environment:
    http_proxy: "{{ lookup('env','http_proxy') }}"
    https_proxy: "{{ lookup('env','https_proxy') }}"
    no_proxy: "{{ lookup('env','no_proxy') }}"
  when: execution_mode == 'online-deployment'

- name: Check if the role for the scenario exists
  stat:
    path: "{{ engine_cache }}/repos/swconfig/{{ scenario[deploy_scenario].installers[installer_type].role }}"
  register: role_directory

- name: Fail if the role for the scenario '{{ deploy_scenario }}' does not exist
  fail:
    msg: "Role for the scenario '{{ deploy_scenario }}' doesn't exist in infra/swconfig repo!"
  when: not role_directory.stat.exists

- name: Check if playbook for all the curated apps exist
  stat:
    path: "{{ apps_path }}/{{ app }}/{{ installer_type }}/playbooks/install.yml"
  loop: "{{ curated_apps }}"
  loop_control:
    loop_var: app
  register: app_install_file

- name: Fail if the app install playbooks does not exist
  fail:
    msg: "Playbook for some of the apps do not exist in infra/swconfig repo!"
  loop: "{{ app_install_file.results }}"
  when: not item.stat.exists

# TODO: This is probably not the right place to create the apps playbook
# Will leave it here until we find a better home for this.
# swconfig/apps should have its own install-apps.yml to install the
# required apps. That will make swconfig independent of engine.
- name: Render app installation playbook
  template:
    src: install-apps.yml.j2
    dest: "{{ apps_path }}/install-apps.yml"

# vim: set ts=2 sw=2 expandtab:
