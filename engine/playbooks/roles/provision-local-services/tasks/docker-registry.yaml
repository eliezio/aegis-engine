---
# ============LICENSE_START=======================================================
#  Copyright (C) 2019 The Nordix Foundation. All rights reserved.
# ================================================================================
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# SPDX-License-Identifier: Apache-2.0
# ============LICENSE_END=========================================================

- name: Load distribution variables
  include_vars: '{{ ansible_os_family }}.yaml'

- name: Install pyOpenSSL from pip
  pip:
    name: pyopenssl
    state: present

- name: Create folder to store self-signed certificates docker registry service
  file:
    path: "{{ cert_folder }}"
    state: "{{ item }}"
  with_items:
    - absent
    - directory
  become: false

- name: Generate OpenSSL private key for local docker registry
  openssl_privatekey:
    path: "{{ cert_folder }}/ca.pem"
  become: false

- name: Generate OpenSSL certificate signing request for local docker registry
  openssl_csr:
    path: "{{ cert_folder }}/ca.csr"
    privatekey_path: "{{ cert_folder }}/ca.pem"
    common_name: "{{ server_fqdn }}"
  become: false

- name: Generate self-signed OpenSSL certificate for local docker registry
  openssl_certificate:
    path: "{{ cert_folder }}/ca.crt"
    csr_path: "{{ cert_folder }}/ca.csr"
    privatekey_path: "{{ cert_folder }}/ca.pem"
    provider: selfsigned
    subject:
      commonName: "{{ server_fqdn }}"
    force: true
  become: false

- name: Install docker
  action: |
    {{ ansible_pkg_mgr }} name={{ docker_package_name }} state=present update_cache=true

- name: Restart docker service
  service:
    name: "{{ docker_service_name }}"
    state: restarted

- name: Stop existing local docker registry service
  docker_container:
    name: "{{ docker_registry_container_name }}"
    state: absent
    force_kill: true

- name: Load docker registry image
  docker_image:
    name: "{{ docker_registry_container_name }}"
    load_path: "{{ docker_registry_image_path }}"
    state: present

- name: Start local docker registry service
  docker_container:
    name: "{{ docker_registry_container_name }}"
    image: "registry:{{ docker_registry_version }}"
    detach: true
    restart_policy: always
    ports:
      - "443:443"
    volumes:
      - "{{ cert_folder }}:/certs"
    env:
      REGISTRY_HTTP_ADDR: "0.0.0.0:443"
      REGISTRY_HTTP_TLS_CERTIFICATE: "/certs/ca.crt"
      REGISTRY_HTTP_TLS_KEY: "/certs/ca.pem"

- name: Create folder to store self-signed certificates for docker client
  file:
    path: "/etc/docker/certs.d/{{ server_fqdn }}"
    state: "{{ item }}"
  with_items:
    - absent
    - directory

- name: Copy self-signed certificate
  copy:
    src: "{{ cert_folder }}/ca.crt"
    dest: "/etc/docker/certs.d/{{ server_fqdn }}"

# vim: set ts=2 sw=2 expandtab:
