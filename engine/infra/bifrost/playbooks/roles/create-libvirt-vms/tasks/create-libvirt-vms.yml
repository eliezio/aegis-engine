---
# ============LICENSE_START=======================================================
#  Copyright (C) 2019 The Nordix Foundation. All rights reserved.
# ================================================================================
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# SPDX-License-Identifier: Apache-2.0
# ============LICENSE_END=========================================================
- name: List info on pools
  virt_pool:
    command: facts
    uri: "{{ vm_libvirt_uri }}"

- name: Set prealloc arg for Debian
  set_fact:
    prealloc: "--prealloc-metadata"
  when:
    - ansible_os_family == 'Debian'
    - vm_libvirt_uri == 'qemu:///system'

- name: Destroy vm '{{ vms[item] }}'
  virt:
    command: destroy
    name: "{{ vms[item] }}"
    uri: "{{ vm_libvirt_uri }}"
  ignore_errors: true

- name: Undefine vm '{{ vms[item] }}'
  virt:
    command: undefine
    name: "{{ vms[item] }}"
    uri: "{{ vm_libvirt_uri }}"
  ignore_errors: true

- name: Initialize disk information for vm '{{ vms[item] }}'
  set_fact:
    disks: [ ]
    dev_suffix: "abcdefghijklmnopqrstuvwxyz"

- name: Create target device names of all disks for vm '{{ vms[item] }}'
  set_fact:
    disks: "{{ disks + [ disk | combine( { 'dev': 'vd' + dev_suffix[disk_no] } ) ] }}"
  with_items:
   - "{{ nodes[node_no].disks }}"
  loop_control:
    loop_var: disk
    index_var: disk_no

- name: Setup volumes for vm '{{ vms[item] }}'
  include_tasks: create-libvirt-volumes.yml
  with_items:
   - "{{ disks }}"
  loop_control:
    loop_var: disk

- name: Delete logs from previous deployment
  file:
    path: "{{ vm_console_log_path }}/"
    state: absent

- name: Create directory for console logs
  file:
    path: "{{ vm_console_log_path }}"
    state: directory
    mode: 0755

- name: Create vm '{{ vms[item] }}'
  virt:
    command: define
    name: "{{ vms[item] }}"
    uri: "{{ vm_libvirt_uri }}"
    xml: "{{ lookup('template', 'libvirt-vm.xml.j2') }}"

- name: Set virtual IPMI port for '{{ vms[item] }}'
  set_fact:
    virtual_ipmi_port: "{{ ( nodes[node_no].remote_management.port | default(623) | int ) }}"

- name: Plug vm '{{ vms[item] }}' into vbmc on port '{{ virtual_ipmi_port }}'
  command: vbmc add {{ vms[item] }} --libvirt-uri {{ vm_libvirt_uri }} --port {{ virtual_ipmi_port }}
  environment:
    PATH: "{{ lookup('env', 'ENGINE_VENV') }}/bin"

- name: Start vbmc for '{{ vms[item] }}'
  command: vbmc start {{ vms[item] }}
  environment:
    PATH: "{{ lookup('env', 'ENGINE_VENV') }}/bin"

# vim: set ts=2 sw=2 expandtab:
