---
# ============LICENSE_START=======================================================
#  Copyright (C) 2019 The Nordix Foundation. All rights reserved.
# ================================================================================
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# SPDX-License-Identifier: Apache-2.0
# ============LICENSE_END=========================================================

heat_template_version: pike

description: Common template for instances to install cluster on

parameters:
  # parameters for instances
  instance_name:
    type: string
    label: Name
    description: Instance name

  image:
    type: string
    label: Image name or ID
    description: Image to use for instances

  volume_size:
    type: string
    label: Volume size
    description: Size of the volume

  flavor:
    type: string
    label: Flavor
    description: Flavor to use for instances

  keypair:
    type: string
    label: Key name
    description: Keypair to use for instances

  internal_security_group:
    type: string
    label: Internal Security Group
    description: Security Group to place jumphost and cluster instances in

  external_security_group:
    type: string
    label: External Security Group
    default: none
    description: Security Group to access instance from public network

  public_network:
    type: string
    label: Public network name or ID
    description: Public network to attach instance to
    default: NA

  private_network:
    type: string
    label: Private network name or ID
    description: Private network to attach instances to

  use_network:
    type: string
    label: Network to use
    description: Which network to use for instance

conditions:
  skip_volume: {equals: [{get_param: volume_size}, "0"]}
  create_volume:
    not: skip_volume
  use_public_network: {equals: [{get_param: use_network}, "public"]}
  use_private_network:
    not: use_public_network

resources:
  root_login:
    type: OS::Heat::CloudConfig
    properties:
      cloud_config:
        disable_root: false

  boot_config:
    type: OS::Heat::MultipartMime
    properties:
      parts:
        - config: {get_resource: root_login}

  port_private:
    type: OS::Neutron::Port
    condition: use_private_network
    properties:
      network: {get_param: private_network}
      replacement_policy: AUTO
      security_groups:
        - {get_param: internal_security_group}

  port_public:
    type: OS::Neutron::Port
    condition: use_public_network
    properties:
      network: {get_param: public_network}
      replacement_policy: AUTO
  # This has to be addressed, current combination of security group
  # doesn't allow ingress/egress comunication to k8s api via https.
  # Worked around by using default security group
  #    security_groups:
  #     - {get_param: internal_security_group}
  #     - {get_param: external_security_group}

  bootable_volume:
    type: OS::Cinder::Volume
    condition: create_volume
    properties:
      name:
        list_join: ['.', ['volume', {get_param: instance_name}]]
      size: {get_param: volume_size}
      image: {get_param: image}

  instance_with_volume:
    type: OS::Nova::Server
    condition: create_volume
    properties:
      name: {get_param: instance_name}
      image: {get_param: image}
      flavor: {get_param: flavor}
      key_name: {get_param: keypair}
      networks:
        - port: {if: [use_public_network, {get_resource: port_public}, {get_resource: port_private}]}
      block_device_mapping:
        - device_name: vda
          volume_id: {get_resource: bootable_volume}
          delete_on_termination: true
      user_data_format: SOFTWARE_CONFIG
      user_data: {get_resource: boot_config}
      config_drive: true
  instance_without_volume:
    type: OS::Nova::Server
    condition: skip_volume
    properties:
      name: {get_param: instance_name}
      image: {get_param: image}
      flavor: {get_param: flavor}
      key_name: {get_param: keypair}
      networks:
        - port: {if: [use_public_network, {get_resource: port_public}, {get_resource: port_private}]}
      user_data_format: SOFTWARE_CONFIG
      user_data: {get_resource: boot_config}
      config_drive: true

outputs:
  instance_private_ip:
    value: {if: ["create_volume", {get_attr: [instance_with_volume, first_address]}, {get_attr: [instance_without_volume, first_address]}]}

# vim: set ts=2 sw=2 expandtab:
