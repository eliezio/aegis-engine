---
# ============LICENSE_START=======================================================
#  Copyright (C) 2019 The Nordix Foundation. All rights reserved.
# ================================================================================
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# SPDX-License-Identifier: Apache-2.0
# ============LICENSE_END=========================================================

- name: Get node name from IDF for host "{{ inventory_hostname }}"
  set_fact:
    node_name: "{{ item.key }}"
  with_dict: "{{ (installer_type == 'kolla') | ternary(idf.kolla.hostnames, idf.kubespray.hostnames) }}"
  when: item.value == inventory_hostname

- name: Set facts for the node "{{ node_name }}"
  set_fact:
    node: "{{ nodes | selectattr('name', 'equalto', node_name) | first }}"

- name: Fetch mgmt network interface name
  set_fact:
    mgmt_ifname: "{{ (node.interfaces[idf.net_config.mgmt.interface].vlan == 'native') | ternary(interface.device, interface.device + '.' + node.interfaces[idf.net_config.mgmt.interface].vlan) }}"
  loop: "{{ ansible_interfaces | map('regex_replace', '-', '_') | map('regex_replace', '^', 'ansible_') | map('extract', hostvars[inventory_hostname]) |  selectattr('macaddress','defined') | list }}"
  loop_control:
    loop_var: interface
  when:
    - interface.macaddress == node.interfaces[idf.net_config.mgmt.interface].mac_address
    - "{{ '.' not in interface.device }}"

- name: Fetch neutron network interface name
  set_fact:
    neutron_ifname: "{{ (node.interfaces[idf.net_config.neutron.interface].vlan == 'native') | ternary(interface.device, interface.device + '.' + node.interfaces[idf.net_config.neutron.interface].vlan) }}"
  loop: "{{ ansible_interfaces | map('regex_replace', '-', '_') | map('regex_replace', '^', 'ansible_') | map('extract', hostvars[inventory_hostname]) |  selectattr('macaddress','defined') | list }}"
  loop_control:
    loop_var: interface
  when:
    - interface.macaddress == node.interfaces[idf.net_config.neutron.interface].mac_address
    - "{{ '.' not in interface.device }}"
